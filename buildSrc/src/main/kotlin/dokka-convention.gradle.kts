/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

import aws.sdk.kotlin.dokka.TrimNavigation

plugins {
    id("org.jetbrains.dokka")
}

dokka {
    val sdkVersion: String by project
    moduleVersion.set(sdkVersion)

    dokkaGeneratorIsolation = ProcessIsolation {
        maxHeapSize = "16g"
    }

    pluginsConfiguration.html {
        customStyleSheets.from(
            rootProject.file("docs/dokka-presets/css/aws-styles.css"),
        )

        customAssets.from(
            rootProject.file("docs/dokka-presets/assets/logo-icon.svg"),
            rootProject.file("docs/dokka-presets/scripts/accessibility.js"),
            rootProject.file("docs/dokka-presets/scripts/custom-navigation-loader.js"),
        )

        templatesDir.set(rootProject.file("docs/dokka-presets/templates"))

        footerMessage.set("Â© ${java.time.LocalDate.now().year}, Amazon Web Services, Inc. or its affiliates. All rights reserved.")
        separateInheritedMembers.set(true)
    }

    // each module can include their own top-level module documentation
    // see https://kotlinlang.org/docs/kotlin-doc.html#module-and-package-documentation
    if (project.file("API.md").exists()) {
        dokkaSourceSets.configureEach {
            includes.from(project.file("API.md"))
        }
    }

    dokkaSourceSets.configureEach {
        // Only configure samples on `commonMain`.
        // Fixes compiler warnings: "Source sets 'common' and 'desktop' have the common sample roots. In Dokka K2 it will be an error."
        if (name == "commonMain") {
            samples.from(project.file("samples").path, project.file("generated-src/samples").path)
        }

        // Each module can include their own top-level module documentation in one or more included Markdown files,
        // each of which must begin with `# Module <module-name>` where <module-name> is the literal name of the
        // Gradle module. See https://kotlinlang.org/docs/dokka-module-and-package-docs.html for more details.
        val includeFiles = setOf(
            "OVERVIEW.md", // Auto-generated by ModuleDocumentationIntegration
            "DOCS.md", // Hand-written docs explaining a module in greater detail
            "API.md", // Auto-generated by `kat` tool
        ).mapNotNull { project.file(it).takeIf { it.exists() } }
        includes.from(includeFiles)
    }

    // Configure Dokka to link to smithy-kotlin types
    dokkaSourceSets.configureEach {
        externalDocumentationLinks {
            create("smithy-kotlin") {
                url("https://docs.aws.amazon.com/smithy-kotlin/api/latest")
            }
        }
    }
}

dependencies {
    dokkaPlugin(project(":dokka-aws"))
}

val trimNavigationTask = tasks.register<TrimNavigation>("trimNavigationFiles") {
    sourceDirectory.set(layout.buildDirectory.get().dir("dokka/html"))
}

tasks.dokkaGenerate {
    finalizedBy(trimNavigationTask)
}
