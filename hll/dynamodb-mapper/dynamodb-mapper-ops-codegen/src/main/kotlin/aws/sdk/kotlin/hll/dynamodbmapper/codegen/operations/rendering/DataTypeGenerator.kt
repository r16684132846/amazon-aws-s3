/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
package aws.sdk.kotlin.hll.dynamodbmapper.codegen.operations.rendering

import aws.sdk.kotlin.hll.codegen.core.CodeGenerator
import aws.sdk.kotlin.hll.codegen.model.*
import aws.sdk.kotlin.hll.codegen.rendering.*
import aws.sdk.kotlin.hll.codegen.util.plus

/**
 * Generates immutable data types from a [Structure] into an underlying [CodeGenerator]. These data types consist of:
 * * a read-only `interface` (with a `val` field for each [Structure] member)
 * * a `private data class` that serves as the default implementation
 * * a `toBuilder` method which turns a built object into a builder
 * * a `copy` method which modifies a copy of a built object and returns the result
 * * a DSL factory function named after the generated interface for creating new instances
 *
 * This generator delegates to [BuilderRenderer] to also generate builders.
 *
 * Example of generated data type:
 *
 * ```kotlin
 * public interface FooRequest<T> {
 *     public companion object { }
 *
 *     public val id: Int
 *     public val name: String
 *     public val foo: T
 * }
 *
 * private data class UserImpl<T>(
 *     override val id: Int,
 *     override val name: String,
 *     override val foo: T,
 * )
 *
 * // Builder generated by BuilderRenderer
 *
 * public fun <T> FooRequest<T>.toBuilder(): FooRequestBuilder<T> = FooRequestBuilder<T>.apply {
 *     id = this@toBuilder.id
 *     name = this@toBuilder.name
 *     foo = this@toBuilder.foo
 * }
 *
 * public fun <T> FooRequest<T>.copy(block: FooRequestBuilder<T>.() -> Unit): FooRequest<T> =
 *     toBuilder.apply(block).build()
 *
 * public fun <T> FooRequest(block: FooRequestBuilder<T>.() -> Unit): FooRequest<T> =
 *     FooRequestBuilder<T>().apply(block).build()
 * ```
 * @param ctx The active rendering context
 * @param generator The underlying generator for the context into which the data type should be written
 * @param structure The [Structure] which describes the data type for which to generate code
 */
internal class DataTypeGenerator(
    private val ctx: RenderContext,
    generator: CodeGenerator,
    private val structure: Structure,
) : CodeGenerator by generator {
    fun generate() {
        write("@#T", Types.Smithy.ExperimentalApi)
        withBlock("public interface #T {", "}", structure.type) {
            write("@#T", Types.Smithy.ExperimentalApi)
            write("public companion object { }") // leave room for future expansion
            blankLine()
            members { write("public val #L: #T", name, type) }
        }
        blankLine()

        val genericParams = structure.genericVars().asParamsList()
        val genericParamsWithSpacer = if (genericParams.isEmpty()) "" else "$genericParams "
        val implName = "${structure.type.shortName}Impl"
        val implType = structure.type.copy(shortName = implName)
        openBlock("private data class #L#L(", implName, genericParams)
        members { write("override val #L: #T,", name, type) }
        closeBlock("): #T", structure.type)
        blankLine()

        val builderCtx = ctx.copy(
            attributes = ctx.attributes + (RenderOptions.VisibilityAttribute to Visibility.PUBLIC),
        )
        val builderName = BuilderRenderer.builderName(structure.type)
        BuilderRenderer(this, structure.type, implType, structure.members, builderCtx).render()

        blankLine()
        write("@#T", Types.Smithy.ExperimentalApi)
        withBlock(
            "public fun #1L#2T.toBuilder(): #3L#4L = #3L#4L().apply {",
            "}",
            genericParamsWithSpacer,
            structure.type,
            builderName,
            genericParams,
        ) {
            members { write("#1L = this@toBuilder.#1L", name) }
        }

        blankLine()
        write("@#T", Types.Smithy.ExperimentalApi)
        withBlock(
            "public fun #1L#2T.copy(block: #3L#4L.() -> Unit): #2T =",
            "",
            genericParamsWithSpacer,
            structure.type,
            builderName,
            genericParams,
        ) {
            write("toBuilder().apply(block).build()")
        }

        blankLine()
        write("@#T", Types.Smithy.ExperimentalApi)
        withBlock(
            "public fun #L#L(block: #L#L.() -> Unit): #T =",
            "",
            genericParamsWithSpacer,
            structure.type.shortName,
            builderName,
            genericParams,
            structure.type,
        ) {
            write("#L#L().apply(block).build()", builderName, genericParams)
        }
    }

    private inline fun members(crossinline block: Member.() -> Unit) {
        structure.members.forEach { it.block() }
    }
}
